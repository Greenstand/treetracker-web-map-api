name: API CI/CD Pipeline

on:
  push:
    branches:
      - master
env:
  project-directory: ./

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci')
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: npm clean install
        run: npm ci
        working-directory: ${{ env.project-directory }}
      - name: run ESLint
        run: npm run lint
        working-directory: ${{ env.project-directory }}
#       - name: run api tests
#         run: npm run test
#         working-directory: ${{ env.project-directory }}


  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository == "Greenstand/${{ github.event.repository.name }}"
    steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          
      - name: npm clean install
        run: npm ci
        working-directory: ${{ env.project-directory }}
        
      - run: npm i -g semantic-release @semantic-release/{git,exec,changelog}
      
      - run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build snapshot and push on merge
        id: docker_build_release
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: greenstand/${{ github.event.repository.name }}:${{ steps.package-version.outputs.current-version }}
          
      - id: export_bumped_version
        run: |
          export BUMPED_VERSION="${{ steps.package-version.outputs.current-version }}"
          echo "::set-output name=bumped_version::${BUMPED_VERSION}"
          
    outputs:
      bumped_version: ${{ steps.export_bumped_version.outputs.bumped_version }}

  deploy:
    name: Deploy to dev env
    runs-on: ubuntu-latest
    needs: release
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository == "Greenstand/${{ github.event.repository.name }}"
    steps:
      - uses: actions/checkout@v2
      - name: Install kustomize
        run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
      - name: Run kustomize
        run: (cd deployment/base && ../../kustomize edit set image greenstand/${{ github.event.repository.name }}:${{ needs.release.outputs.bumped_version }} )
      - name: Install doctl for kubernetes
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DEV_DIGITALOCEAN_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DEV_CLUSTER_NAME }}
      - name: Update kubernetes resources
        run: kustomize build deployment/overlays/development | kubectl apply -n ${{ secrets.K8S_NAMESPACE }} --wait -f -
